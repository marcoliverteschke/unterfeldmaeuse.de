<?php
/**
 * @file
 * Provides menu links for dynamic positioning of nodes based on configurable rules.
 */

/**
 * Implements hook_panels_pane_content_alter().
 *
 * Panels are rendered before hook_page_delivery_callback_alter() is called, so
 * for Panels pages, we evaluate our rules here instead.
 */
function menu_position_panels_pre_render($display) {
  menu_position_page_delivery_callback_alter();
}

/**
 * Implements hook_page_delivery_callback_alter().
 *
 * This is the only hook that occurs after the page callback, but before
 * hook_page_build (when blocks are added). We're using this hook for its
 * timing, not its data.
 */
function menu_position_page_delivery_callback_alter() {
  // Don't evaluate the rules twice.
  $evaluated = &drupal_static(__FUNCTION__, FALSE);
  if ($evaluated) {
    return;
  }
  $evaluated = TRUE;

  $context = array();
  $context['path'] = $_GET['q'];
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $context['node'] = node_load(arg(1));
  }
  menu_position_evaluate_rules($context);
}

/**
 * Implements hook_permission().
 */
function menu_position_permission() {
  return array(
    'administer menu positions' => array(
      'title' => t('Administer menu position rules'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function menu_position_menu() {
  $items['admin/structure/menu-position'] = array(
    'title' => 'Menu position rules',
    'description' => 'Configure rules for menu positions.',
    'access arguments' => array('administer menu positions'),
    'page callback' => 'menu_position_rules_form_callback',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'menu_position.admin.inc',
  );
  $items['admin/structure/menu-position/add'] = array(
    'title' => 'Add menu position rule',
    'description' => 'Add a new menu position rule.',
    'access arguments' => array('administer menu positions'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_position_add_rule_form'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'menu_position.admin.inc',
  );
  $items['admin/structure/menu-position/edit'] = array(
    'title' => 'Edit menu position rule',
    'description' => 'Edit a menu position rule.',
    'access arguments' => array('administer menu positions'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_position_edit_rule_form'),
    'type' => MENU_CALLBACK,
    'file' => 'menu_position.admin.inc',
  );
  $items['admin/structure/menu-position/delete'] = array(
    'title' => 'Delete menu position rule',
    'description' => 'Delete a menu position rule.',
    'access arguments' => array('administer menu positions'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_position_delete_rule_form'),
    'type' => MENU_CALLBACK,
    'file' => 'menu_position.admin.inc',
  );
  $items['menu-position/%'] = array(
    'title' => 'Menu position router',
    'description' => 'Sets access to all menu position links.',
    'access arguments' => array('access content'),
    'page callback' => 'menu_position_router',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'menu_position.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function menu_position_theme() {
  return array(
    'menu_position_rules_order' => array(
      'render element' => 'element',
      'file' => 'menu_position.admin.inc',
    ),
  );
}

/**
 * Implements hook_menu_position_rule_plugins().
 */
function menu_position_menu_position_rule_plugins() {
  $plugins = array(
    'content_type' => array(
      'file' => 'plugins/menu_position.content_type.inc',
    ),
    'pages' => array(
      'file' => 'plugins/menu_position.pages.inc',
    ),
  );
  if (module_exists('locale')) {
    $plugins['language'] = array(
      'file' => 'plugins/menu_position.language.inc',
    );
  }
  return $plugins;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function menu_position_form_menu_overview_form_alter(&$form, &$form_state) {
  module_load_include('inc', 'menu_position', 'menu_position.admin');
  _menu_position_form_menu_overview_form_alter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function menu_position_form_menu_edit_item_alter(&$form, &$form_state) {
  module_load_include('inc', 'menu_position', 'menu_position.admin');
  _menu_position_form_menu_edit_item_alter($form, $form_state);
}

/**
 * Implements hook_menu_link_alter().
 */
function menu_position_menu_link_alter(&$item) {
  if (isset($item['module']) && $item['module'] == 'menu_position') {
    // Don't allow the link to be "enabled".
    $item['hidden'] = 1;
  }
}

/**
 * Implements hook_menu_link_update().
 */
function menu_position_menu_link_update($link) {
  module_load_include('inc', 'menu_position', 'menu_position.admin');
  _menu_position_menu_link_update($link);
}

/**
 * Evaluates all rules based on the given path.
 *
 * @param $path
 *   The path used to evaluate all rules.
 * @param $context
 *   The full node object if the path is a node page.
 */
function menu_position_evaluate_rules($context = array()) {
  $path = $context['path'];

  // Retrieve the original router item.
  $original_router_item = menu_get_item();

  // Sanity check: if there is no existing menu item, Drupal won't display any
  // navigation menus anyway and will error out when we try methods below.
  if ($original_router_item === FALSE) {
    return;
  }

  // Retrieve the rules from the database. For speed, we don't call
  // menu_position_read_rules() and unserialize the conditions only if needed.
  $rules = db_query('SELECT * FROM {menu_position_rules} WHERE enabled = :enabled ORDER BY weight, rid', array(':enabled' => 1));

  // Retrieve the list of menus the path is already in.
  $menu_names = db_query('SELECT menu_name FROM {menu_links} WHERE link_path = :path', array(':path' => $path))->fetchCol();

  // Retrieve the main and secondary menu names.
  $main_menu      = theme_get_setting('toggle_main_menu')      ? variable_get('menu_main_links_source', 'main-menu') : FALSE;
  $secondary_menu = theme_get_setting('toggle_secondary_menu') ? variable_get('menu_secondary_links_source', 'user-menu') : FALSE;

  // Flag that we haven't set the breadcrumb yet.
  $breadcrumb_set = FALSE;

  // Examine each rule and check its conditions.
  foreach ($rules as $rule) {
    if (in_array($rule->menu_name, $menu_names)) {
      // If the page is already placed in the rule's menu, skip the rule.
      $rule_matches = FALSE;
      if ($rule->menu_name == $main_menu) {
        // Don't override the main menu links.
        $main_menu = FALSE;
      }
      if ($rule->menu_name == $secondary_menu) {
        $secondary_menu = FALSE;
      }
      $breadcrumb_set = TRUE;
    }
    else {
      // A rule with no conditions always matches.
      $rule_matches = TRUE;
      // Go through each condition, ANDing each result.
      $rule->conditions = unserialize($rule->conditions);
      foreach ($rule->conditions as $plugin => $variables) {
        // Add the current rule and node to the callback's variables.
        $variables['rule'] = $rule;
        $variables['context'] = $context;
        // Find the plugin's callback function.
        $callback = menu_position_get_condition_callback($plugin);
        if ($callback) {
          // Check if this condition matches.
          $rule_matches = $callback($variables);
        }
        else {
          // If the callback cannot be found, the condition has failed.
          $rule_matches = FALSE;
        }
        // No need to check other conditions if this condition failed.
        if (!$rule_matches) {
          break;
        }
      }
    }

    // Let other modules manipulate the rule.
    drupal_alter('menu_position_rule', $rule, $context, $rule_matches, $breadcrumb_set);

    // We've found a matching rule.
    if ($rule_matches) {

      // Reset the menu trail that views may have set.
      if ($original_router_item['page_callback'] == 'views_page') {
        $preferred = &drupal_static('menu_link_get_preferred');
        unset($preferred[$path]);
      }

      // Retrieve menu item specified in the rule.
      $menu_item = menu_link_load($rule->mlid);

      // Sanity check: if the menu link doesn't exist abort processing the rule.
      if (!$menu_item) {
        continue;
      }

      // Clone the original router item, but insert our menu_position path.
      $router_item = $original_router_item;
      $router_item['href'] = $menu_item['link_path'];
      // Even if we are denied access to the page, we still want to show the
      // navigational paths to the page.
      $router_item['access'] = TRUE;

      // Get the default preferred link and save it so that it can be used in
      // place of the rule's menu link when menu trees are rendered.
      $preferred_link = $original_router_item;
      menu_position_set_link($rule->rid, $preferred_link);

      // Allow the rule's parent menu item to show "expanded" status.
      menu_position_expand_parent_link($rule->plid);

      // Temporarily override the original router item.
      menu_set_item(NULL, $router_item);

      // Set the theme's secondary menu links if the rule matches the secondary menu.
      if ($rule->menu_name == $secondary_menu) {
        $menu_depth = ($secondary_menu == $main_menu) ? 2 : 1;
        menu_position_precache_tree($router_item, $original_router_item, $menu_item['menu_name'], $menu_depth);
        // Mark that we no longer need to set the secondary menu's tree.
        $secondary_menu = FALSE;
      }
      // Set the theme's main menu links if the rule matches the main menu.
      if ($rule->menu_name == $main_menu) {
        menu_position_precache_tree($router_item, $original_router_item, $menu_item['menu_name'], 1);
        // Mark that we no longer need to set the main menu's tree.
        $main_menu = FALSE;
      }
      menu_position_precache_tree($router_item, $original_router_item, $menu_item['menu_name']);

      // Alter the active trail if breadcrumbs still need to be set.
      if (!$breadcrumb_set) {
        // Remove any menu position rules from the trail.
        $active_trail = menu_set_active_trail();
        array_pop($active_trail);
        menu_set_active_trail($active_trail);

        $breadcrumb_set = TRUE;
      }

      // Restore the original router item.
      menu_set_item(NULL, $original_router_item);

      // Don't let other rules match against this rule's menu.
      $menu_names[] = $rule->menu_name;
    }
  }

  // Clean-up the menu tree cache.
  $tree = &drupal_static('menu_tree_page_data', array());
  foreach (array_keys($tree) as $key) {
    if (strpos($key, ':page:menu-position/')) {
      // To save memory, clean up the cache since we won't need this data again.
      unset($tree[$key]);
    }
  }
}

/**
 * Dynamically expands the parent menu item for a rule.
 *
 * @param $plid
 *   The parent menu item's mlid.
 */
function menu_position_expand_parent_link($plid = NULL) {
  $link_id = &drupal_static(__FUNCTION__, NULL);

  if (isset($plid)) {
    $link_id = $plid;
  }
  return $link_id;
}

/**
 * Dynamically sets the menu item for a specified rule.
 *
 * @param $rid
 *   The rule ID.
 * @param $link
 *   The menu item that should be used for the rule.
 */
function menu_position_set_link($rid, $link) {
  menu_position_get_link('menu-position/' . $rid, $link);
}

/**
 * Returns the dynamically set menu item for a specified rule.
 *
 * @param $path
 *   The path of the requested rule, e.g. menu-position/10.
 * @return
 *   The title that should be used for the rule's menu item.
 */
function menu_position_get_link($path, $link = NULL) {
  $links = &drupal_static(__FUNCTION__, array());

  // If a link is given, save it for later retrieval.
  if ($link) {
    $links[$path] = $link;
  }
  return isset($links[$path]) ? $links[$path] : NULL;
}

/**
 * Implements hook_translated_menu_link().
 *
 * All of the menu items of menu position rules have their "alter" option set
 * which allows them to be altered with this hook. We "translate" the menu item
 * to have the proper URL and title for the current page.
 */
function menu_position_translated_menu_link_alter(&$item, &$map) {
  if ($item['module'] == 'menu_position') {
    $menu_item = menu_position_get_link($item['link_path']);
    // We only alter the link after its replacement has been set.
    if (!empty($menu_item['title'])) {
      $item['title'] = $menu_item['title'];
      $item['href'] = $menu_item['href'];
      $item['hidden'] = 0;
    }
  }
  elseif ($item['mlid'] == menu_position_expand_parent_link()) {
    $item['has_children'] = 1;
  }
}

/**
 * Places a menu tree cache in place of the original router item's tree.
 */
function menu_position_precache_tree($router_item, $original_router_item, $menu_name, $menu_depth = 0) {
  // Copy the menu tree cache from our faked path to the original router's
  // path. We iterate through 3 levels of menu_depth: 0 - full tree, 1 -
  // primary links, 2 - secondary links.
  $tree = &drupal_static('menu_tree_page_data', array());

  // Create a menu tree using the menu_position path.
  menu_tree_page_data($menu_name, $menu_depth ? $menu_depth : NULL);

  // Get the cache for the tree we just generated.
  $router_item_cid = 'links:' . $menu_name . ':page:' . $router_item['href'] . ':' . $GLOBALS['language']->language . ':' . (int) $router_item['access'] . ':' . (int) $menu_depth;
  $cache = cache_get($router_item_cid, 'cache_menu');
  $tree_cid = $cache->data;

  // Copy the cache to the tree that contains the original router item.
  $original_router_item_cid = 'links:' . $menu_name . ':page:' . $original_router_item['href'] . ':' . $GLOBALS['language']->language . ':' . (int) $original_router_item['access'] . ':' . $menu_depth;
  cache_set($original_router_item_cid, $tree_cid, 'cache_menu');

  // Ensure menu_tree_page_data's static cache is up-to-date as well.
  $tree[$original_router_item_cid] = $tree[$router_item_cid];
}

/**
 * Retrieves a list of information about every rule plugin.
 */
function menu_position_get_plugins() {
  $plugins = &drupal_static(__FUNCTION__, array());

  if (empty($plugins)) {
    foreach (module_implements('menu_position_rule_plugins') as $module) {
      $function = $module . '_menu_position_rule_plugins';
      if (function_exists($function)) {
        // Register each module's plugin while setting baseline defaults.
        foreach ($function() as $name => $plugin) {
          $plugins[$name] = $plugin + array(
            'module' => $module,
            'file' => '',
            'form_callback' => $module . '_menu_position_rule_' . $name . '_form',
            'condition_callback' => $module . '_menu_position_condition_' . $name,
          );
        }
      }
    }
  }

  return $plugins;
}

/**
 * Loads the include file containing a condition's callback function definition.
 *
 * @param $plugin
 *   The name of the plugin.
 * @return
 *   The name of the callback function, or FALSE if it could not be found.
 */
function menu_position_get_condition_callback($plugin) {
  $plugins = menu_position_get_plugins();
  $callback = !empty($plugins[$plugin]['condition_callback']) ? $plugins[$plugin]['condition_callback'] : FALSE;

  if ($callback && !function_exists($callback)) {
    // Load the specified include file.
    if (!empty($plugins[$plugin]['file'])) {
      $file = pathinfo($plugins[$plugin]['file']);
      // Allow plugins to be in a sub-directory.
      if ($file['dirname']) {
        $file['filename'] = $file['dirname'] . '/' . $file['filename'];
      }
      module_load_include($file['extension'], $plugins[$plugin]['module'], $file['filename']);
    }
    // Note if the callback still cannot be found.
    if (!function_exists($callback)) {
      $callback = FALSE;
    }
  }

  return $callback;
}
