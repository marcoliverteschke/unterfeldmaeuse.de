<?php

// $Id$
/**
 * @file
 * Add clientside validation support for Field Validation
 */
function clientside_validation_field_validation_clientside_validation_form_alter(&$form, &$form_state, &$js_rules) {
  if (isset($form['#entity_type']) && isset($form['#bundle'])) {
    $rules = field_validation_get_bundle_rules($form['#entity_type'], $form['#bundle']);
    if (!empty($rules)) {
      foreach ($rules as $rule) {
        if (isset($form[$rule['field_name']])) {
          clientside_validation_field_validation_after_build_recurse($form['#id'], $form[$rule['field_name']], $form_state, $rule, $js_rules);
        }
      }
    }
  }
}

function clientside_validation_field_validation_after_build_recurse($form_id, &$form, &$form_state, $rule, &$js_rules) {
  if ($children = array_values(element_children($form))) {
    foreach ($children as $index => $item) {
      $element = &$form[$item];
      $types = array(
        'textfield', 'textarea', 'select', 'radio', 'checkbox', 'password', 'file', 'radios', 'checkboxes',
      );
      if (isset($element['#type']) && in_array($element['#type'], $types) && isset($element['#name']) && strpos($element['#name'], '[value]') !== FALSE) {
        clientside_validation_field_validation_regular($form_id, $element, $rule, $js_rules);
      }
      clientside_validation_field_validation_after_build_recurse($form_id, $element, $form_state, $rule, $js_rules);
    }
  }
}

function clientside_validation_field_validation_regular($form_id, $element, $rule, &$js_rules) {
  $el_name = $element['#name'];
  $el_title = $el_name;
  if (isset($element['#title'])) {
    $el_title = $element['#title'];
  }
  switch ($rule['validator']) {
    case 'regex':
      $message = isset($rule['error_message']) ? $rule['error_message'] : '';
      _clientside_validation_set_regex($el_name, $el_title, $js_rules, $rule['data'], $message);
      break;

    default:
      break;
  }
}